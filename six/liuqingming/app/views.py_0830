# -*- coding:utf-8 -*-
from app import app
from flask import g,session,render_template,request,url_for,redirect
from util import chaxun, insert,delete,select,update,cha_uid,insert_article,search_art
import sys,os
app.config['SECRET_KEY'] = os.urandom(24)
reload(sys)
sys.setdefaultencoding('utf-8')
from functools import wraps

def login_required(func) :
    @wraps(func)
    def wrapper(*args,**kwargs) :
        if session.get('uid') :
           return func(*args,**kwargs)
        else :
            return redirect(url_for('login'))
    
    return wrapper

@app.context_processor   
def mycontext_processor() :
    uid = session.get('uid')
    print uid
    if uid :
        userinfo1 = cha_uid(uid)
        if userinfo1 :
            return {'userinfo1':userinfo1}
    return {}
            

@app.route('/',methods=['GET','POST'])
@app.route('/index/',methods=['GET','POST'])
@login_required
def index():
    userinfos = chaxun()
    return render_template('index.html',users = userinfos)

@app.route('/dele/',methods=['GET','POST'])
def dele():
    session_uid = session.get('uid')
    uid = request.args.get('id')  #type uid <type 'unicode'> session_uid <type 'int'>
    result = delete(uid)
    #print "uid %s session_uid %s" % (uid,session_uid)
    #print "type uid %s session_uid %s" % (str(type(uid)),str(type(session_uid)))
    if int(uid.encode("utf-8")) == session_uid :
        print "del %s" % session.get('uid')
        del session['uid']  #不删除判断login_required报错
    print "del %s" % session.get('uid')
    return redirect(url_for('index'))

@app.route('/upd/',methods=['GET','POST'])
def upd():
    if request.method == 'GET':
        uid = request.args.get('id')
        userinfo = cha_uid(uid)
        print "upd" ,userinfo
        return render_template('upd.html',n = userinfo)
    else :
        keys = ['uid','username','passwd','passwd1','age','sex','phone','email','role']
        users = {}
        for key in keys :
            users[key] = request.form.get(key)
        update(users)
        return redirect(url_for('index'))


@app.route('/login/',methods=['GET','POST'])
def login():
    if request.method == 'GET' :
        return render_template('login.html')
    else :
        #passs
        username = request.form.get('username')
        passwd = request.form.get('passwd')
        print "type username %s " % str(type (username) )
        users = {}
        users['username'] = username
        users['passwd'] = passwd
        print users ,type(users)
        userinfo = select(users)
        print userinfo,type(userinfo)
        #return "xyz"
        if userinfo :
            if userinfo['passwd'] == passwd :
                session['uid'] = userinfo['uid']
                #session['role'] = userinfo['role']
                g.role = userinfo['role']
                #31天内不需要登录
                session.permanent = True
                return redirect(url_for('index'))
            else :
                err_info = "passwd error"
                err_info = "密码错误"
                return  render_template('login.html',err_info = err_info) 
        else:
            #b = "用户名不存在"         
            err_info = "用户名不存在"         
            return  render_template('login.html', err_info = err_info)

@app.route('/regist/',methods = ['GET','POST'])
def regist():
    if request.method == 'GET' :
        return render_template('regist.html')
    else :
        #passs
        keys = ['username','passwd','passwd1','age','sex','phone','email','role']
        users = {}
        for key in keys :
            users[key] = request.form.get(key)
        if users.get('passwd') == users.get('passwd1') :
            del users['passwd1']
            print users ,'123'
            if insert(users) :
                return redirect('/login/')
            else :
                err_info = "用户名已存在"
                return render_template('regist.html',m = err_info )
        else :
            m = "两次输入密码不一致"
            return render_template('regist.html',m = m )
        
@app.route('/article/',methods = ['GET','POST'])
@login_required  #需要先登录
def article():
    if request.method == 'GET' :
        return render_template('quest.html')
    else :
        articles = request.form.to_dict()
        articles['author_id']= session.get('uid')
        print articles
        insert_article(articles)
        return redirect(url_for('index'))

@app.route('/search_article/',methods = ['GET','POST'])
def search_article():
    search_texts = request.form.to_dict()
    search_result = search_art(search_texts)
    if search_result :
        print search_result
        return render_template('search_article.html',search_title=search_texts.get('title'),search_result=search_result)
    else :
        return render_template('search_article.html',search_title=search_texts.get('title'))


@app.route('/logout/')
def logout() :
    #session.pop('uid')
    #del session('uid')
    session.clear()
    return redirect(url_for('login'))
